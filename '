;; The two most useful functions in Emacs when you're learning how to configure it are: 


;; * describe-variable (C-h v / Ctrl+H then V) - Shows documentation for any variable in Emacs
;; * describe-function (C-h f / Ctrl+H then F) - Shows documentation for any function in Emacs
;; * The best of both worlds: describe-symbol (C-h o / Ctrl+H then O)!

;; =========================================== SETUP =====================================================
;; Clean the Screen
(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)

;; WHEATGRASS THEME
(load-theme 'wheatgrass t)

;; Buffer config
;(setq ido-enable-flex-matching t)
;(setq ido-everywhere t)
;(ido-mode 1)

; make ibuffer default
;(defalias 'list-buffers 'ibuffer) 

;; tabbar
(use-package tabbar
:ensure t
:config (tabbar-mode 1))
(global-set-key [M-left] 'tabbar-backward-tab)
(global-set-key [M-right] 'tabbar-forward-tab)

(require 'powerline)
(powerline-default-theme)

(setq tabbar-ruler-global-tabbar t)    ; get tabbar
;;(setq tabbar-ruler-global-ruler t)     ; get global ruler
;;(setq tabbar-ruler-popup-menu t)       ; get popup menu.
;;(setq tabbar-ruler-popup-toolbar t)    ; get popup toolbar
;;(setq tabbar-ruler-popup-scrollbar t)  ; show scroll-bar on mouse-move
(require 'tabbar-ruler)

;; window
(windmove-default-keybindings)
(winner-mode 1)

;; font
;(set-frame-font "Inconsolata 12" nil t)
;; =========================================== PACKAGE MANAGER ===========================================

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

(use-package command-log-mode)

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :demand
  (setq use-package-always-defer t)
  :config
  (ivy-mode 1))

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))


;; USE AND TRY PACKAGE
(use-package try
:ensure t)

(use-package which-key
:ensure t
:config
(which-key-mode))

;; =========================================== LINE NUMBER ================================================
;; Global Regular
(global-display-line-numbers-mode) 

;; Relative
(defvar my-linum-current-line-number 0) 

(setq linum-format 'my-linum-relative-line-numbers)

(defun my-linum-relative-line-numbers (line-number)
  (let ((test2 (- line-number my-linum-current-line-number)))
    (propertize
     (number-to-string (cond ((<= test2 0) (* -1 test2))
                             ((> test2 0) test2)))
     'face 'linum)))

(defadvice linum-update (around my-linum-update)
  (let ((my-linum-current-line-number (line-number-at-pos)))
    ad-do-it))
(ad-activate 'linum-update)

(global-linum-mode t)

;; =========================================== EVIL MODE =============================================
;;; UNDO
;; Vim style undo not needed for emacs8
(use-package undo-fu)

;;; VIM BINDINGS
(use-package evil
  :demand t
  :bind (("<escape>" . keyboard-escape-quit))
  :init
  ;; allows for using cgn
  ;; (setq evil-search-module 'evil-search)
  (setq evil-want-keybinding nil)
  ;; no vim insert bindings
  (setq evil-undo-system 'undo-fu)
  :config
  (evil-mode 1))

;; org mode
(add-to-list 'load-path "/path/to/org-evil/directory")
(require 'org-evil)


;; =========================================== ORG MODE =================================================
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

;; =========================================== OTHER ====================================================
;; MPC MUSIC PLAYER
(setq
  mpc-browser-tags '(Artist Album)
  mpc-songs-format "%-5{Time} %25{Title} %20{Album} %20{Artist}")

;; Latex
;; (load "auctex.el" nil t t)
;; (require 'tex-mik)
;;      (setq TeX-auto-save t)
;;     (setq TeX-parse-self t)
;;     (setq-default TeX-master nil)

;;     (add-hook 'LaTeX-mode-hook 'visual-line-mode)
;;     (add-hook 'LaTeX-mode-hook 'flyspell-mode)
;;     (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

;;     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
;;     (setq reftex-plug-into-AUCTeX t)

;; =========================================== AUTO-GENERATED ===========================================
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ispell-dictionary nil)
 '(package-selected-packages
   '(command-log-mode doom-modeline ivy tabbar-ruler mode-icons powerline tabbar undo-fu evil use-package cmake-mode)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
